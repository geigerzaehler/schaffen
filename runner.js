// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, childProcess, render,
    __slice = [].slice;

  childProcess = require('child_process');

  EventEmitter = require('events').EventEmitter;

  module.exports = function() {
    var args, eventEmitter, exec, options, run, spawn, stdio, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    spawn = childProcess.spawn, exec = childProcess.exec;
    eventEmitter = new EventEmitter;
    if (typeof options === 'string') {
      args.push(options);
      options = {};
    }
    stdio = ['ignore', 1, 2];
    if (options.silent) {
      stdio[1] = 'ignore';
    }
    run = function() {
      var arg, compiledArgs, emit, process, vars;
      vars = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      compiledArgs = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = args.length; _j < _len; _j++) {
          arg = args[_j];
          _results.push(render(arg, vars));
        }
        return _results;
      })();
      if (compiledArgs.length === 1) {
        compiledArgs.unshift('bash', '-c');
      }
      process = spawn(compiledArgs[0], compiledArgs.slice(1), {
        stdio: stdio
      });
      emit = process.emit.bind(process);
      process.emit = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        emit.apply(null, args);
        return eventEmitter.emit.apply(eventEmitter, args);
      };
      process.on('exit', function(code, signal) {
        if (code || signal) {
          return eventEmitter.emit('fail', code);
        } else {
          return eventEmitter.emit('end');
        }
      });
      eventEmitter.emit.apply(eventEmitter, ['run'].concat(__slice.call(compiledArgs)));
      return process;
    };
    run.on = function(event, cb) {
      eventEmitter.on(event, cb);
      return run;
    };
    return run;
  };

  render = function(template, vars) {
    return template.split('{}').reduce(function(rendered, next, index) {
      return rendered + (vars.shift() || '') + next;
    });
  };

}).call(this);
